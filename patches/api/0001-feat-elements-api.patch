From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: DeeChael <DeeChael@outlook.com>
Date: Sun, 27 Aug 2023 01:46:25 +0800
Subject: [PATCH] feat: elements api


diff --git a/build.gradle.kts b/build.gradle.kts
index 8045f92ffdfb4164bcbef99c41359590c45f9006..769a87d32b0858b5e9b0ae9aefe97f059327e48d 100644
--- a/build.gradle.kts
+++ b/build.gradle.kts
@@ -1,6 +1,7 @@
 plugins {
     `java-library`
     `maven-publish`
+    kotlin("jvm") version "1.9.0"
 }
 
 java {
diff --git a/src/main/java/org/bukkit/Bukkit.java b/src/main/java/org/bukkit/Bukkit.java
index f78b5fd3c3347d28da58777bff88903d2eb140f6..6a525705b78da8057191f68a163c0132d1c5cb2a 100644
--- a/src/main/java/org/bukkit/Bukkit.java
+++ b/src/main/java/org/bukkit/Bukkit.java
@@ -14,6 +14,8 @@ import java.util.Set;
 import java.util.UUID;
 import java.util.function.Consumer;
 import java.util.logging.Logger;
+
+import net.deechael.elements.api.ElementManager;
 import org.bukkit.Warning.WarningState;
 import org.bukkit.advancement.Advancement;
 import org.bukkit.block.data.BlockData;
@@ -2752,6 +2754,16 @@ public final class Bukkit {
     }
     // Paper end - Folia region threading API
 
+    // Artist start
+    /**
+     * Returns the element manager
+     * @return element manager
+     */
+    public static ElementManager getElementManager() {
+        return server.getElementManager();
+    }
+    // Artist end
+
     @NotNull
     public static Server.Spigot spigot() {
         return server.spigot();
diff --git a/src/main/java/org/bukkit/Server.java b/src/main/java/org/bukkit/Server.java
index 8d8fe04e6b09d2a5b1cc05002073df5c58cdcb96..8a22f65498f51507ea09b522a17e360035184c5e 100644
--- a/src/main/java/org/bukkit/Server.java
+++ b/src/main/java/org/bukkit/Server.java
@@ -14,6 +14,8 @@ import java.util.Set;
 import java.util.UUID;
 import java.util.function.Consumer;
 import java.util.logging.Logger;
+
+import net.deechael.elements.api.ElementManager;
 import org.bukkit.Warning.WarningState;
 import org.bukkit.advancement.Advancement;
 import org.bukkit.block.data.BlockData;
@@ -2404,4 +2406,12 @@ public interface Server extends PluginMessageRecipient, net.kyori.adventure.audi
      */
     boolean isOwnedByCurrentRegion(@NotNull Entity entity);
     // Paper end - Folia region threading API
+
+    // Artist start
+    /**
+     * Returns the element manager
+     * @return element manager
+     */
+    ElementManager getElementManager();
+    // Artist end
 }
diff --git a/src/main/java/org/bukkit/entity/Damageable.java b/src/main/java/org/bukkit/entity/Damageable.java
index fc4d3bcd9b16097086fef7975274d825b65adb10..57902b69986d29c64782734a2a27ba83085f3d55 100644
--- a/src/main/java/org/bukkit/entity/Damageable.java
+++ b/src/main/java/org/bukkit/entity/Damageable.java
@@ -1,5 +1,6 @@
 package org.bukkit.entity;
 
+import net.deechael.elements.api.application.source.ApplicationSource;
 import org.bukkit.attribute.Attribute;
 import org.jetbrains.annotations.Nullable;
 
@@ -86,4 +87,6 @@ public interface Damageable extends Entity {
      */
     @Deprecated
     void resetMaxHealth();
+
+    void elementalDamage(double amount, ApplicationSource source);
 }
diff --git a/src/main/java/org/bukkit/entity/LivingEntity.java b/src/main/java/org/bukkit/entity/LivingEntity.java
index 19e58e62ae442ef9be02ca7fa2f55e370a54afa4..0ee9a1287cfd6d72438b60fa88ecc58a1e6b856c 100644
--- a/src/main/java/org/bukkit/entity/LivingEntity.java
+++ b/src/main/java/org/bukkit/entity/LivingEntity.java
@@ -4,6 +4,8 @@ import java.util.Collection;
 import java.util.List;
 import java.util.Set;
 import java.util.UUID;
+
+import net.deechael.elements.api.application.ElementApplication;
 import org.bukkit.FluidCollisionMode;
 import org.bukkit.Location;
 import org.bukkit.Material;
@@ -1192,4 +1194,6 @@ public interface LivingEntity extends Attributable, Damageable, ProjectileSource
      */
     void setBodyYaw(float bodyYaw);
     // Paper end
+
+    ElementApplication getElementApplication();
 }
diff --git a/src/main/kotlin/net/deechael/elements/api/ElementGauge.kt b/src/main/kotlin/net/deechael/elements/api/ElementGauge.kt
new file mode 100644
index 0000000000000000000000000000000000000000..2a0e2f1ba6b19a33378cd073c1f6cbdf0c002ef4
--- /dev/null
+++ b/src/main/kotlin/net/deechael/elements/api/ElementGauge.kt
@@ -0,0 +1,19 @@
+package net.deechael.elements.api
+
+data class ElementGauge(
+    val unit: Int,
+    val decimal: Int = 0
+) {
+
+    fun toDouble(): Double {
+        return "$unit.$decimal".toDouble()
+    }
+
+    fun multiple(value: Double): ElementGauge {
+        val newValue = this.toDouble() * value
+        val newUnit = ((newValue - (newValue % 1)) / 1).toInt()
+        val newDecimal = (((newValue - newUnit) - ((newValue - newUnit) % 0.1)) / 0.1).toInt()
+        return ElementGauge(newUnit, newDecimal)
+    }
+
+}
diff --git a/src/main/kotlin/net/deechael/elements/api/ElementManager.kt b/src/main/kotlin/net/deechael/elements/api/ElementManager.kt
new file mode 100644
index 0000000000000000000000000000000000000000..b6b42afd064d3217cc386732af4f1cb4b6a438c8
--- /dev/null
+++ b/src/main/kotlin/net/deechael/elements/api/ElementManager.kt
@@ -0,0 +1,21 @@
+package net.deechael.elements.api
+
+import net.deechael.elements.api.reaction.ElementReaction
+
+interface ElementManager {
+
+    fun hasElementType(id: String): Boolean
+
+    fun getElementType(id: String): ElementType
+
+    fun getElementTypes(): List<ElementType>
+
+    fun hasElementReaction(id: String): Boolean
+
+    fun getElementReaction(id: String): ElementReaction
+
+    fun getElementReactions(): List<ElementReaction>
+
+    fun getElementReactionsWithFormerType(formerElementType: ElementType): List<ElementReaction>
+
+}
\ No newline at end of file
diff --git a/src/main/kotlin/net/deechael/elements/api/ElementSourceType.kt b/src/main/kotlin/net/deechael/elements/api/ElementSourceType.kt
new file mode 100644
index 0000000000000000000000000000000000000000..c78a88746b7c173bc909861eb152c8d9c89bcc2a
--- /dev/null
+++ b/src/main/kotlin/net/deechael/elements/api/ElementSourceType.kt
@@ -0,0 +1,7 @@
+package net.deechael.elements.api
+
+enum class ElementSourceType {
+
+    ENVIRONMENT, ENTITY, REACTION, PLUGIN
+
+}
\ No newline at end of file
diff --git a/src/main/kotlin/net/deechael/elements/api/ElementType.kt b/src/main/kotlin/net/deechael/elements/api/ElementType.kt
new file mode 100644
index 0000000000000000000000000000000000000000..20d0f33809bb080cad5546889ba52ad56477315d
--- /dev/null
+++ b/src/main/kotlin/net/deechael/elements/api/ElementType.kt
@@ -0,0 +1,22 @@
+package net.deechael.elements.api
+
+import net.deechael.elements.api.application.ApplicationTrigger
+import net.kyori.adventure.text.Component
+import java.awt.Color
+
+interface ElementType {
+
+    fun getId(): String
+
+    fun getIcon(): Component
+
+    fun getColor(): Color
+
+    fun isApplicable(): Boolean
+
+    fun isReactable(): Boolean
+
+    fun isReactionElement(): Boolean
+
+    fun getTrigger(): ApplicationTrigger
+}
\ No newline at end of file
diff --git a/src/main/kotlin/net/deechael/elements/api/ElementTypeRemovalReason.kt b/src/main/kotlin/net/deechael/elements/api/ElementTypeRemovalReason.kt
new file mode 100644
index 0000000000000000000000000000000000000000..ca12e2d5e388603594391c1ff932e0cb96b68731
--- /dev/null
+++ b/src/main/kotlin/net/deechael/elements/api/ElementTypeRemovalReason.kt
@@ -0,0 +1,7 @@
+package net.deechael.elements.api
+
+enum class ElementTypeRemovalReason {
+
+    RUNNING_OUT, REACTED, PLUGIN
+
+}
\ No newline at end of file
diff --git a/src/main/kotlin/net/deechael/elements/api/application/ApplicationTrigger.kt b/src/main/kotlin/net/deechael/elements/api/application/ApplicationTrigger.kt
new file mode 100644
index 0000000000000000000000000000000000000000..f374b917d0321a50a90badfb1cd9d90b1df1e3f7
--- /dev/null
+++ b/src/main/kotlin/net/deechael/elements/api/application/ApplicationTrigger.kt
@@ -0,0 +1,18 @@
+package net.deechael.elements.api.application
+
+import net.deechael.elements.api.application.source.ApplicationSource
+import org.bukkit.entity.LivingEntity
+
+@FunctionalInterface
+fun interface ApplicationTrigger {
+
+    fun trigger(applicationSource: ApplicationSource, sufferer: LivingEntity)
+
+    companion object {
+
+        @JvmStatic
+        val EMPTY_TRIGGER = ApplicationTrigger { _, _ -> }
+
+    }
+
+}
\ No newline at end of file
diff --git a/src/main/kotlin/net/deechael/elements/api/application/ElementApplication.kt b/src/main/kotlin/net/deechael/elements/api/application/ElementApplication.kt
new file mode 100644
index 0000000000000000000000000000000000000000..db0bf2a394093adcf627df601a74a820b599be81
--- /dev/null
+++ b/src/main/kotlin/net/deechael/elements/api/application/ElementApplication.kt
@@ -0,0 +1,19 @@
+package net.deechael.elements.api.application
+
+import net.deechael.elements.api.ElementGauge
+import net.deechael.elements.api.ElementType
+import net.deechael.elements.api.application.source.ApplicationSource
+
+interface ElementApplication {
+
+    fun clear()
+
+    fun getAppliedElementTypes(): List<ElementType>
+
+    fun getGauge(elementType: ElementType): ElementGauge
+
+    fun applyElement(source: ApplicationSource)
+
+    fun applyElementWithDamage(source: ApplicationSource, damage: Double): Double
+
+}
\ No newline at end of file
diff --git a/src/main/kotlin/net/deechael/elements/api/application/source/ApplicationSource.kt b/src/main/kotlin/net/deechael/elements/api/application/source/ApplicationSource.kt
new file mode 100644
index 0000000000000000000000000000000000000000..a86eee79f6b67903c8824a788ac1e1e47a61da39
--- /dev/null
+++ b/src/main/kotlin/net/deechael/elements/api/application/source/ApplicationSource.kt
@@ -0,0 +1,15 @@
+package net.deechael.elements.api.application.source
+
+import net.deechael.elements.api.ElementGauge
+import net.deechael.elements.api.ElementSourceType
+import net.deechael.elements.api.ElementType
+
+interface ApplicationSource {
+
+    fun getElementType(): ElementType
+
+    fun getElementGauge(): ElementGauge
+
+    fun getElementSourceType(): ElementSourceType
+
+}
\ No newline at end of file
diff --git a/src/main/kotlin/net/deechael/elements/api/application/source/EntitySource.kt b/src/main/kotlin/net/deechael/elements/api/application/source/EntitySource.kt
new file mode 100644
index 0000000000000000000000000000000000000000..56235f746ecf21b39cf85034b37ff8f84fa32659
--- /dev/null
+++ b/src/main/kotlin/net/deechael/elements/api/application/source/EntitySource.kt
@@ -0,0 +1,14 @@
+package net.deechael.elements.api.application.source
+
+import net.deechael.elements.api.ElementSourceType
+import org.bukkit.entity.Entity
+
+interface EntitySource : ApplicationSource {
+
+    override fun getElementSourceType(): ElementSourceType {
+        return ElementSourceType.ENTITY
+    }
+
+    fun getEntity(): Entity
+
+}
\ No newline at end of file
diff --git a/src/main/kotlin/net/deechael/elements/api/application/source/EnvironmentSource.kt b/src/main/kotlin/net/deechael/elements/api/application/source/EnvironmentSource.kt
new file mode 100644
index 0000000000000000000000000000000000000000..df56d2af101cbb222333bffc218a94614a1bf2fa
--- /dev/null
+++ b/src/main/kotlin/net/deechael/elements/api/application/source/EnvironmentSource.kt
@@ -0,0 +1,14 @@
+package net.deechael.elements.api.application.source
+
+import net.deechael.elements.api.ElementSourceType
+import org.bukkit.Location
+
+interface EnvironmentSource : ApplicationSource {
+
+    override fun getElementSourceType(): ElementSourceType {
+        return ElementSourceType.ENVIRONMENT
+    }
+
+    fun getLocation(): Location
+
+}
\ No newline at end of file
diff --git a/src/main/kotlin/net/deechael/elements/api/application/source/PluginSource.kt b/src/main/kotlin/net/deechael/elements/api/application/source/PluginSource.kt
new file mode 100644
index 0000000000000000000000000000000000000000..d2b5e72fa467533384224d78907f445644a30b8d
--- /dev/null
+++ b/src/main/kotlin/net/deechael/elements/api/application/source/PluginSource.kt
@@ -0,0 +1,14 @@
+package net.deechael.elements.api.application.source
+
+import net.deechael.elements.api.ElementSourceType
+import org.bukkit.plugin.Plugin
+
+interface PluginSource : ApplicationSource {
+
+    override fun getElementSourceType(): ElementSourceType {
+        return ElementSourceType.PLUGIN
+    }
+
+    fun getPlugin(): Plugin
+
+}
\ No newline at end of file
diff --git a/src/main/kotlin/net/deechael/elements/api/application/source/ReactionSource.kt b/src/main/kotlin/net/deechael/elements/api/application/source/ReactionSource.kt
new file mode 100644
index 0000000000000000000000000000000000000000..5e0a92e15a2a6d50834048709276c1bae54b2d08
--- /dev/null
+++ b/src/main/kotlin/net/deechael/elements/api/application/source/ReactionSource.kt
@@ -0,0 +1,14 @@
+package net.deechael.elements.api.application.source
+
+import net.deechael.elements.api.ElementSourceType
+import net.deechael.elements.api.reaction.ElementReaction
+
+interface ReactionSource : ApplicationSource {
+
+    override fun getElementSourceType(): ElementSourceType {
+        return ElementSourceType.REACTION
+    }
+
+    fun getReaction(): ElementReaction
+
+}
\ No newline at end of file
diff --git a/src/main/kotlin/net/deechael/elements/api/reaction/ElementReaction.kt b/src/main/kotlin/net/deechael/elements/api/reaction/ElementReaction.kt
new file mode 100644
index 0000000000000000000000000000000000000000..5bed76266f4571c074285e5975b26148303cd9e0
--- /dev/null
+++ b/src/main/kotlin/net/deechael/elements/api/reaction/ElementReaction.kt
@@ -0,0 +1,18 @@
+package net.deechael.elements.api.reaction
+
+import net.deechael.elements.api.ElementType
+import java.awt.Color
+
+interface ElementReaction {
+
+    fun getId(): String
+
+    fun getColor(): Color
+
+    fun getFormerElementType(): ElementType
+
+    fun getLatterElementTypes(): Array<ElementType>
+
+    fun getTrigger(): ElementReactionTrigger
+
+}
\ No newline at end of file
diff --git a/src/main/kotlin/net/deechael/elements/api/reaction/ElementReactionTrigger.kt b/src/main/kotlin/net/deechael/elements/api/reaction/ElementReactionTrigger.kt
new file mode 100644
index 0000000000000000000000000000000000000000..ba2bcbdb8ff250026f5de2dd9a1e4cd2625e589c
--- /dev/null
+++ b/src/main/kotlin/net/deechael/elements/api/reaction/ElementReactionTrigger.kt
@@ -0,0 +1,28 @@
+package net.deechael.elements.api.reaction
+
+import net.deechael.elements.api.ElementGauge
+import net.deechael.elements.api.application.source.ApplicationSource
+import org.bukkit.entity.LivingEntity
+
+@FunctionalInterface
+interface ElementReactionTrigger {
+
+    fun trigger(
+        reaction: ElementReaction,
+        applicationSource: ApplicationSource,
+        sufferer: LivingEntity,
+        formerElementTypeGauge: ElementGauge
+    ) {
+    }
+
+    fun triggerDamage(
+        reaction: ElementReaction,
+        applicationSource: ApplicationSource,
+        sufferer: LivingEntity,
+        formerElementTypeGauge: ElementGauge,
+        originalDamage: Double
+    ): Double {
+        return originalDamage
+    }
+
+}
\ No newline at end of file
diff --git a/src/main/kotlin/net/deechael/elements/event/ElementAppliedEvent.kt b/src/main/kotlin/net/deechael/elements/event/ElementAppliedEvent.kt
new file mode 100644
index 0000000000000000000000000000000000000000..9d624746113d5114047a1eb2ab0aa67686e2151b
--- /dev/null
+++ b/src/main/kotlin/net/deechael/elements/event/ElementAppliedEvent.kt
@@ -0,0 +1,39 @@
+package net.deechael.elements.event
+
+import net.deechael.elements.api.application.source.ApplicationSource
+import org.bukkit.entity.Entity
+import org.bukkit.event.Cancellable
+import org.bukkit.event.HandlerList
+import org.bukkit.event.entity.EntityEvent
+
+class ElementAppliedEvent(
+    what: Entity,
+    val source: ApplicationSource,
+) : EntityEvent(what), Cancellable {
+
+    private var cancelled = false
+
+    override fun getHandlers(): HandlerList {
+        return HANDLER_LIST
+    }
+
+    override fun isCancelled(): Boolean {
+        return this.cancelled
+    }
+
+    override fun setCancelled(cancel: Boolean) {
+        this.cancelled = cancel
+    }
+
+    companion object {
+
+        private val HANDLER_LIST = HandlerList()
+
+        @JvmStatic
+        fun getHandlerList(): HandlerList {
+            return HANDLER_LIST
+        }
+
+    }
+
+}
\ No newline at end of file
diff --git a/src/main/kotlin/net/deechael/elements/event/ElementReactedEvent.kt b/src/main/kotlin/net/deechael/elements/event/ElementReactedEvent.kt
new file mode 100644
index 0000000000000000000000000000000000000000..d99255e5bcfaea8027db0be29d8ddf9521008f5a
--- /dev/null
+++ b/src/main/kotlin/net/deechael/elements/event/ElementReactedEvent.kt
@@ -0,0 +1,41 @@
+package net.deechael.elements.event
+
+import net.deechael.elements.api.application.source.ApplicationSource
+import net.deechael.elements.api.reaction.ElementReaction
+import org.bukkit.entity.Entity
+import org.bukkit.event.Cancellable
+import org.bukkit.event.HandlerList
+import org.bukkit.event.entity.EntityEvent
+
+class ElementReactedEvent(
+    what: Entity,
+    val source: ApplicationSource,
+    val reaction: ElementReaction
+) : EntityEvent(what), Cancellable {
+
+    private var cancelled = false
+
+    override fun getHandlers(): HandlerList {
+        return HANDLER_LIST
+    }
+
+    override fun isCancelled(): Boolean {
+        return this.cancelled
+    }
+
+    override fun setCancelled(cancel: Boolean) {
+        this.cancelled = cancel
+    }
+
+    companion object {
+
+        private val HANDLER_LIST = HandlerList()
+
+        @JvmStatic
+        fun getHandlerList(): HandlerList {
+            return HANDLER_LIST
+        }
+
+    }
+
+}
\ No newline at end of file
diff --git a/src/main/kotlin/net/deechael/elements/event/ElementRemovalEvent.kt b/src/main/kotlin/net/deechael/elements/event/ElementRemovalEvent.kt
new file mode 100644
index 0000000000000000000000000000000000000000..db0d80c2f2c4ce8bd8d4ef2564f043a423b7b225
--- /dev/null
+++ b/src/main/kotlin/net/deechael/elements/event/ElementRemovalEvent.kt
@@ -0,0 +1,30 @@
+package net.deechael.elements.event
+
+import net.deechael.elements.api.ElementType
+import net.deechael.elements.api.ElementTypeRemovalReason
+import org.bukkit.entity.Entity
+import org.bukkit.event.HandlerList
+import org.bukkit.event.entity.EntityEvent
+
+class ElementRemovalEvent(
+    what: Entity,
+    val reason: ElementTypeRemovalReason,
+    val elementType: ElementType
+) : EntityEvent(what) {
+
+    override fun getHandlers(): HandlerList {
+        return HANDLER_LIST
+    }
+
+    companion object {
+
+        private val HANDLER_LIST = HandlerList()
+
+        @JvmStatic
+        fun getHandlerList(): HandlerList {
+            return HANDLER_LIST
+        }
+
+    }
+
+}
\ No newline at end of file
diff --git a/src/main/kotlin/net/deechael/elements/event/ElementalDamageEvent.kt b/src/main/kotlin/net/deechael/elements/event/ElementalDamageEvent.kt
new file mode 100644
index 0000000000000000000000000000000000000000..fd3fce266e4c6fe2a58471193ddcb954f6e42d0b
--- /dev/null
+++ b/src/main/kotlin/net/deechael/elements/event/ElementalDamageEvent.kt
@@ -0,0 +1,29 @@
+package net.deechael.elements.event
+
+import net.deechael.elements.api.application.source.ApplicationSource
+import org.bukkit.entity.Entity
+import org.bukkit.event.HandlerList
+import org.bukkit.event.entity.EntityEvent
+
+class ElementalDamageEvent(
+    what: Entity,
+    val source: ApplicationSource,
+    var damage: Double
+) : EntityEvent(what) {
+
+    override fun getHandlers(): HandlerList {
+        return HANDLER_LIST
+    }
+
+    companion object {
+
+        private val HANDLER_LIST = HandlerList()
+
+        @JvmStatic
+        fun getHandlerList(): HandlerList {
+            return HANDLER_LIST
+        }
+
+    }
+
+}
\ No newline at end of file
