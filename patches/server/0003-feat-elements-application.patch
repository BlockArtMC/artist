From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: DeeChael <DeeChael@outlook.com>
Date: Mon, 28 Aug 2023 23:57:15 +0800
Subject: [PATCH] feat: elements application


diff --git a/src/main/java/net/minecraft/world/entity/LivingEntity.java b/src/main/java/net/minecraft/world/entity/LivingEntity.java
index d934cfc2552e2e21af9d6516a67f5bb63f0275ba..e45a8e7a42ec4ed390c9a6d2bdcf06f00cc3bffb 100644
--- a/src/main/java/net/minecraft/world/entity/LivingEntity.java
+++ b/src/main/java/net/minecraft/world/entity/LivingEntity.java
@@ -20,9 +20,16 @@ import java.util.UUID;
 import java.util.function.Predicate;
 import javax.annotation.Nullable;
 
+import io.papermc.paper.adventure.PaperAdventure;
 import net.deechael.artist.element.ArtistElementApplication;
+import net.deechael.artist.element.ArtistElementType;
+import net.deechael.artist.element.source.ArtistEnvironmentSource;
+import net.deechael.elements.api.ElementGauge;
+import net.deechael.elements.api.ElementType;
 import net.deechael.elements.api.application.source.ApplicationSource;
 import net.deechael.elements.api.application.source.EntitySource;
+import net.kyori.adventure.text.Component;
+import net.kyori.adventure.text.format.TextColor;
 import net.minecraft.BlockUtil;
 import net.minecraft.advancements.CriteriaTriggers;
 import net.minecraft.commands.arguments.EntityAnchorArgument;
@@ -126,7 +133,9 @@ import net.minecraft.world.phys.Vec3;
 import net.minecraft.world.scores.PlayerTeam;
 import org.bukkit.craftbukkit.entity.CraftHumanEntity;
 import org.bukkit.craftbukkit.entity.CraftLivingEntity;
+import org.bukkit.craftbukkit.util.CraftLocation;
 import org.bukkit.entity.HumanEntity;
+import org.bukkit.entity.TextDisplay;
 import org.slf4j.Logger;
 
 // CraftBukkit start
@@ -271,6 +280,7 @@ public abstract class LivingEntity extends Entity implements Attackable {
     public boolean silentDeath = false; // Paper - mark entity as dying silently for cancellable death event
     public net.kyori.adventure.util.TriState frictionState = net.kyori.adventure.util.TriState.NOT_SET; // Paper
     private ArtistElementApplication elementApplication = new ArtistElementApplication(this);
+    private ArtistSkillContainer skillContainer = new ArtistSkillContainer();
 
     @Override
     public float getBukkitYaw() {
@@ -3085,6 +3095,59 @@ public abstract class LivingEntity extends Entity implements Attackable {
             this.setXRot(0.0F);
         }
         this.elementApplication.tick();
+        if (this.isInWaterRainOrBubble()) {
+            this.elementApplication.applyElement(
+                    new ArtistEnvironmentSource(
+                            this.getBukkitLivingEntity().getLocation(),
+                            ArtistElementType.HYDRO,
+                            new ElementGauge(1, 0)
+                    )
+            );
+        }
+        if (this.isOnFire() || this.isInLava()) {
+            this.elementApplication.applyElement(
+                    new ArtistEnvironmentSource(
+                            this.getBukkitLivingEntity().getLocation(),
+                            ArtistElementType.PYRO,
+                            new ElementGauge(1, 0)
+                    )
+            );
+        }
+        if (this.isInPowderSnow) {
+            this.elementApplication.applyElement(
+                    new ArtistEnvironmentSource(
+                            this.getBukkitLivingEntity().getLocation(),
+                            ArtistElementType.CRYO,
+                            new ElementGauge(1, 0)
+                    )
+            );
+        }
+        Vec3 pos = this.position();
+        List<Component> elementTags = new ArrayList<>();
+        List<ElementType> appliedElementTypes = this.elementApplication.getAppliedElementTypes();
+        for (int i = 0; i < appliedElementTypes.size(); i++) {
+            ElementType elementType = appliedElementTypes.get(i);
+            elementTags.add(elementType.getIcon().color(TextColor.color(elementType.getColor().getRGB())));
+            if (i < (appliedElementTypes.size() - 1)) {
+                elementTags.add(Component.space());
+            }
+        }
+        Component finalComponent = Component.empty();
+        for (Component component : elementTags) {
+            finalComponent.append(component);
+        }
+    }
+
+    @Override
+    public void thunderHit(ServerLevel world, LightningBolt lightning) {
+        super.thunderHit(world, lightning);
+        this.elementApplication.applyElement(
+                new ArtistEnvironmentSource(
+                        this.getBukkitLivingEntity().getLocation(),
+                        ArtistElementType.ELECTRO,
+                        new ElementGauge(1, 0)
+                )
+        );
     }
 
     public void detectEquipmentUpdates() {
